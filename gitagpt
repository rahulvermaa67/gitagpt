<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gita Wisdom Chatbot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Playfair+Display:wght@400;700&display=swap');
        body { font-family: 'Roboto', sans-serif; }
        .font-playfair { font-family: 'Playfair Display', serif; }
        .chat-container {
            max-height: 70vh;
            min-height: 400px;
            overflow-y: auto;
            scroll-behavior: smooth;
        }
        .message.user {
            background-color: #A52A2A;
            color: white;
            align-self: flex-end;
            border-radius: 1.5rem 1.5rem 0.5rem 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .message.bot {
            background-color: #F8F8F8;
            color: #333;
            align-self: flex-start;
            border-radius: 1.5rem 1.5rem 1.5rem 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-out;
        }
        .typing-dots span {
            animation: typing-dot 1s infinite;
            opacity: 0;
            display: inline-block;
        }
        .typing-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }
        .typing-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes typing-dot {
            0%, 20% { opacity: 0; }
            50% { opacity: 1; }
            100% { opacity: 0; }
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-2xl bg-white rounded-3xl shadow-2xl flex flex-col overflow-hidden">
        
        <header class="bg-[#C0C0C0] p-4 text-center font-playfair text-white text-xl md:text-2xl font-bold">
            Gita Wisdom Chatbot
        </header>

        <div id="chatbox" class="chat-container flex flex-col p-6 space-y-4">
            <div class="message bot max-w-[85%] p-4">
                <div class="flex items-start gap-2">
                    <img src="https://cdn.iconscout.com/icon/free/png-512/free-bhagavad-gita-icon-svg-png-download-1857121.png" alt="Gita Icon" class="w-8 h-8 rounded-full flex-shrink-0">
                    <div>
                        Welcome, seeker. I am here to offer guidance based on the timeless wisdom of the Bhagavad Gita. What is on your mind?
                    </div>
                </div>
            </div>
        </div>

        <div id="loading-indicator" class="flex justify-start py-4 hidden">
            <div class="message bot p-4 flex items-center gap-1">
                <span class="typing-dots"><span>•</span><span>•</span><span>•</span></span>
            </div>
        </div>
        
        <form id="chat-form" class="p-4 flex items-center gap-2 border-t border-gray-200 bg-white">
            <input type="text" id="user-input" placeholder="Ask about duty, stress, or inner peace..." class="flex-grow p-3 rounded-full bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#A52A2A] transition-all">
            <button type="submit" class="bg-[#A52A2A] text-white p-3 rounded-full shadow-lg hover:bg-[#800000] transition-colors flex-shrink-0">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                </svg>
            </button>
        </form>

    </div>

    <script>
        const chatbox = document.getElementById('chatbox');
        const chatForm = document.getElementById('chat-form');
        const userInput = document.getElementById('user-input');
        const loadingIndicator = document.getElementById('loading-indicator');
        const apiKey = ""; 
        const apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=" + apiKey;

        const systemInstruction = "You are a compassionate and wise spiritual guide. Your purpose is to answer user questions by providing guidance and wisdom drawn exclusively from the teachings and philosophies of the Bhagavad Gita. Explain the concepts clearly, relate them to modern life, and maintain a calm and supportive tone. Do not provide information outside the scope of the Gita. Do not mention that you are an AI or language model. Respond in the same language as the user's query.";
        
        let chatHistory = [];

        function displayMessage(sender, message) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', sender, 'max-w-[85%]', 'p-4');
            messageDiv.innerHTML = message;
            chatbox.appendChild(messageDiv);
            chatbox.scrollTop = chatbox.scrollHeight;
        }

        async function sendMessage() {
            const userMessage = userInput.value.trim();
            if (!userMessage) return;

            displayMessage('user', userMessage);
            userInput.value = '';
            
            // Show typing indicator
            loadingIndicator.classList.remove('hidden');
            loadingIndicator.style.alignSelf = 'flex-start'; // Align left
            chatbox.appendChild(loadingIndicator);
            chatbox.scrollTop = chatbox.scrollHeight;

            // Check for developer-related questions
            const developerKeywords = ['who created', 'who made', 'developer', 'creator', 'built by', 'designed by', 'rahul verma'];
            const isDeveloperQuestion = developerKeywords.some(keyword => userMessage.toLowerCase().includes(keyword));

            if (isDeveloperQuestion) {
                const creatorResponse = `
                    <p>This chatbot was created by <b>Rahul Verma</b>.</p>
                    <p class="mt-2">You can connect with him on Instagram:</p>
                    <a href="https://www.instagram.com/rahul.verma.67" target="_blank" class="text-[#A52A2A] underline hover:text-[#800000] transition-colors break-words">https://www.instagram.com/rahul.verma.67</a>
                    <img src="http://googleusercontent.com/file_content/1" alt="A picture of the creator, Rahul Verma." class="mt-4 rounded-lg shadow-md max-w-full h-auto">
                `;
                loadingIndicator.classList.add('hidden');
                displayMessage('bot', creatorResponse);
                return;
            }

            // Normal API call
            chatHistory.push({ role: "user", parts: [{ text: userMessage }] });

            const payload = {
                contents: chatHistory,
                systemInstruction: { parts: [{ text: systemInstruction }] }
            };

            try {
                let response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`API response was not ok: ${response.statusText}`);
                }

                const result = await response.json();
                let botResponse = result.candidates[0].content.parts[0].text;
                
                botResponse = botResponse.replace(/\*\*(.*?)\*\*/g, '<b>$1</b>');
                botResponse = botResponse.replace(/\n/g, '<br>');

                loadingIndicator.classList.add('hidden');

                // Bot message with image
                const botMessageWithImage = `
                    <div class="flex items-start gap-2">
                        <img src="https://cdn.iconscout.com/icon/free/png-512/free-bhagavad-gita-icon-svg-png-download-1857121.png" alt="Gita Icon" class="w-8 h-8 rounded-full flex-shrink-0">
                        <div>
                            ${botResponse}
                        </div>
                    </div>
                `;
                
                chatHistory.push({ role: "model", parts: [{ text: botResponse }] });
                displayMessage('bot', botMessageWithImage);

            } catch (error) {
                console.error("Error fetching response:", error);
                loadingIndicator.classList.add('hidden');
                displayMessage('bot', "I am currently unable to provide guidance. Please try again later.");
            }
        }

        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            sendMessage();
        });
    </script>
</body>
</html>
